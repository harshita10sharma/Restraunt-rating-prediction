# -*- coding: utf-8 -*-
"""restraunt_rating

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Fb3USfNAys2qIpXNi23XGu4uUblE81Kh

#                                                   **Restaurant Rating Prediction**
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

# from google.colab import drive
# drive.mount('/content/drive/')

# from google.colab import drive
# drive.mount('/content/drive')

a= pd.read_csv('/Dataset .csv')

a

a.shape

a.info()

a.columns

a.dtypes

a.isna()

a.isna().sum()

a.head()

a.head(10)

a.tail()

a.tail(15)

a.sample()

a.sample(5)

a.sample(5)

a.sample(10)

a.iloc[0:5, :4]

a.iloc[5:778,5:13]

a.loc[:5,('Restaurant Name', 'Cuisines', 'Has Table booking','Switch to order menu','Price range', 'Aggregate rating',  'Rating text')]

a.loc[664:8010,"City"]

a.duplicated().sum

a.describe()

a.describe()['Average Cost for two']

a.corr

a.info()

a.isna().sum()

a1=a['Cuisines'].value_counts()

print(a1,'/n')

a.isna().sum()

a['Cuisines']=a['Cuisines'].fillna(a['Cuisines'].mode()[0])
a

a.info()

a.isna().sum()

"""Graphs and Plots

"""

plt.hist(a['Aggregate rating'])

plt.figure(figsize=(8,4))
a['Cuisines'].value_counts().head(10).plot(kind='bar')
plt.title("Top 10 Cuisines")
plt.xlabel("Cuisine")
plt.ylabel("Count")
plt.xticks(rotation=45)
plt.show()

if 'Has Online delivery' in a.columns:
    plt.figure(figsize=(6,6))
    a['Has Online delivery'].value_counts().plot.pie(autopct='%1.1f%%')
    plt.title("Online Delivery Availability")
    plt.ylabel("")
    plt.show()

plt.figure(figsize=(8,4))
sns.barplot(x='Price range', y='Aggregate rating', data=a)
plt.title("Average Rating vs Price Range")
plt.show()

if 'Has Table booking' in a.columns:
    plt.figure(figsize=(5,5))
    sns.boxplot(x='Has Table booking', y='Aggregate rating', data=a)
    plt.title("Rating by Table Booking")
    plt.show()

plt.figure(figsize=(6,6))
a['Price range'].value_counts().plot.pie(autopct='%1.1f%%')
plt.title("Restaurants by Price Range")
plt.ylabel("")
plt.show()

a = a.drop(['Restaurant ID','Restaurant Name','Address','Longitude','Latitude','Locality Verbose','Locality'], axis=1)
print(a.columns)

a

#                                                                                 Encoding

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
a['City'] = le.fit_transform(a['City'])
a['Cuisines'] = le.fit_transform(a['Cuisines'])
a['Currency'] = le.fit_transform(a['Currency'])
a['Has Table booking'] = le.fit_transform(a['Has Table booking'])
a['Has Online delivery'] = le.fit_transform(a['Has Online delivery'])
a['Is delivering now'] = le.fit_transform(a['Is delivering now'])
a['Switch to order menu'] = le.fit_transform(a['Switch to order menu'])
a['Rating color'] = le.fit_transform(a['Rating color'])
a['Rating text'] = le.fit_transform(a['Rating text'])

a.head()

a

a.isna().sum()

a.head()

a.info()

b= a

plt.figure(figsize=(10,10))
sns.heatmap(b.corr())

plt.figure(figsize=(22,22))
sns.heatmap(b.corr(),annot=True)

b.head()

b.dtypes

b.columns

from sklearn.model_selection import train_test_split
x=a.drop(['Average Cost for two','Currency', 'Is delivering now','Aggregate rating'],axis=1)
y=a['Aggregate rating']

x

y

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.1)

x_train

x_train.shape

y_train

y_train.shape

x_test

y_test

x_test.shape

y_test.shape

"""#multiple regresiion

"""

from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score, mean_absolute_percentage_error

x_train

x_test

x_test.shape

x_train.shape

y_train

y_test

y_train.shape

y_test.shape

x.corr()

sns.heatmap(x.corr(),annot =True, cmap='coolwarm')
plt.title("Heatmap of the correlation for DataFrame x")
plt.show()

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.1)

rf = RandomForestRegressor(n_estimators=200, random_state=42)
rf.fit(x_train, y_train)
y_pred_rf = rf.predict(x_test)

print("\nRandom Forest Results:")
print("RÂ²:", r2_score(y_test, y_pred_rf))
print("MAE:", mean_absolute_error(y_test, y_pred_rf))
print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred_rf)))

lr.predict([[1, 88, 1306, 0, 0, 0, 1, 2, 0, 43]])  #test value

lr.predict([[14	,97,	1270	,0	,0	,0	,4	,2,	0	,16]])  #train value

!pip install catboost

import matplotlib.pyplot as plt
importances = model.feature_importances_
features = X.columns
plt.bar(features, importances)
plt.xticks(rotation=90)
plt.title("Feature Importance")
plt.show()